/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=false,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class SimpleNode implements Node
{
	protected Node parent;
	protected Node[] children;
	protected int id;
	protected Object value;
	protected TacParser parser;

	public SimpleNode(int i)
	{
		id = i;
	}

	public SimpleNode(TacParser p, int i)
	{
		this(i);
		parser = p;
	}

	public void jjtOpen()
	{
	}

	public void jjtClose()
	{
	}

	public void jjtSetParent(Node n)
	{
		parent = n;
	}

	public Node jjtGetParent()
	{
		return parent;
	}

	public void jjtAddChild(Node n, int i)
	{
		if (children == null)
		{
			children = new Node[i + 1];
		} else if (i >= children.length)
		{
			Node c[] = new Node[i + 1];
			System.arraycopy(children, 0, c, 0, children.length);
			children = c;
		}
		children[i] = n;
	}

	public Node jjtGetChild(int i)
	{
		return children[i];
	}

	public int jjtGetNumChildren()
	{
		return (children == null) ? 0 : children.length;
	}

	public void jjtSetValue(Object value)
	{
		this.value = value;
	}

	public Object jjtGetValue()
	{
		return value;
	}

	/*
	 * You can override these two methods in subclasses of SimpleNode to
	 * customize the way the node appears when the tree is dumped. If your
	 * output uses more than one line you should override toString(String),
	 * otherwise overriding toString() is probably all you need to do.
	 */

	public String toString()
	{
		return TacParserTreeConstants.jjtNodeName[id];
	}

	public String toString(String prefix)
	{
		return prefix + toString();
	}
	
	public Node[] getChildren()
	{
		return children;
	}

	/*
	 * Override this method if you want to customize how the node dumps out its
	 * children.
	 */

	public String dump(String prefix)
	{
		String out = "";
		out += toString(prefix) + "\n";
		if (children != null)
		{
			for (int i = 0; i < children.length; ++i)
			{
				SimpleNode n = (SimpleNode) children[i];
				if (n != null)
				{
					out += n.dump(n.value + " ");
				}
			}
		}
		return out;
	}
	
	public static String equalsNode(SimpleNode n)
  {
    SimpleNode left = left(n);
    SimpleNode right = right(n);
    String str;
    if(right.jjtGetNumChildren() == 2)
    {
      String result = (String)left.jjtGetValue();
      String operation = parseOperator(right);
      return result + " " + n.jjtGetValue() + " " +operation;
    }
    else if(right.jjtGetNumChildren() == 0){
      String result = (String)left.jjtGetValue();
      String valor = (String)right.jjtGetValue();
      return result + " " + n.jjtGetValue() + " " +valor;
    }
    return "";
  }

  public static String parseOperator(SimpleNode n) {
    SimpleNode left = left(n);
    SimpleNode right = right(n);

    String op1 = (String)left.jjtGetValue();
    String op2 = (String)right.jjtGetValue();
    return op1 + " " + n.jjtGetValue() + " " + op2;
  }

  public static String parseLabel(SimpleNode n)
  {
    return (String)((SimpleNode)n.jjtGetChild(0)).jjtGetValue();
  }

  public static String parseGoto(SimpleNode n)
  {
    return (String)((SimpleNode)n.jjtGetChild(0)).jjtGetValue();
  }


  public static String leftString(SimpleNode n)
  {
    return (String)((SimpleNode)n.jjtGetChild(0)).jjtGetValue();

  }

  public static String rightString(SimpleNode n)
  {
    return (String)((SimpleNode)n.jjtGetChild(1)).jjtGetValue();
  }

  public static SimpleNode left(SimpleNode n)
  {
    return (SimpleNode)n.jjtGetChild(0);

  }

  public static SimpleNode right(SimpleNode n)
  {
    return(SimpleNode)n.jjtGetChild(1);
  }

}

/*
 * JavaCC - OriginalChecksum=f142f3c75ab40eb03a8b5fd82dcffbc0 (do not edit this
 * line)
 */
