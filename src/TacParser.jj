/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. TacParser.jj */
/*@egen*/options
{
  LOOKAHEAD= 1;
  // NODE_SCOPE_HOOK = true;

}

PARSER_BEGIN(TacParser)
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class TacParser/*@bgen(jjtree)*/implements TacParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTTacParserState jjtree = new JJTTacParserState();

/*@egen*/
  public static void main(String [] args) throws ParseException, 
  FileNotFoundException
  {
    if (args.length < 1)
    {
      System.out.println("Please pass in the filename for a parameter.");
      System.exit(1);
    }
    System.out.println("Reading from file " + args [0]);
    TacParser tacParser = new TacParser(new FileInputStream(args [0]));
    SimpleNode root = tacParser.Expression();
    function(root);
    System.out.println("\nRegister Allocation:");
    LifetimeAnalysis lf = new LifetimeAnalysis();
    lf.parseNode(root);
    lf.printLifetime(root);
  }

  public static void function(SimpleNode root)
  {
    root.dump("");
  }
}

PARSER_END(TacParser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN :
{
  < ASSIGN : ":=" >
| < PLUS : "+" >
| < SUBT : "-" >
| < MULT : "*" >
| < DIV : "/" >
}

TOKEN :
{
  < NUMBER : ([ "0"-"9" ])+ >
| < VARIABLE : ([ "a"-"z", "A"-"Z" ])+ ([ "0"-"9" ])* >
}

SimpleNode Expression() :
{/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  (
    Expr1()
  )+
  < EOF >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Expr1()         :
{/*@bgen(jjtree) Assign */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Assign */
  try {
/*@egen*/
  ExprVariable() t = < ASSIGN > Expr2()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(t.image);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Expr2()       :
{/*@bgen(jjtree) Oper */
  SimpleNode jjtn000 = new SimpleNode(JJTOPER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
} //a anota\u00c3\u00a7\u00c3\u00a3o \u00e2\u20ac\u0153#void\u00e2\u20ac\ufffd instrui a ferramenta para n\u00c3\u00a3o gerar n\u00c3\u00b3s para a regra
{/*@bgen(jjtree) Oper */
  try {
/*@egen*/
  ExprTerm()
  (
    t = < PLUS >
  | t = < SUBT >
  | t = < MULT >
  | t = < DIV >
  )
  ExprTerm()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(t.image);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ExprTerm()       :
{
  Token t;
}
{
  t = < NUMBER > | t = < VARIABLE >/*@bgen(jjtree) Term */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTTERM);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/
  {
    jjtn001.jjtSetValue(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
       
}

void ExprVariable()       :
{
  Token t;
}
{
  t = < VARIABLE >/*@bgen(jjtree) Variable */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTVARIABLE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/
  {
    jjtn001.jjtSetValue(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
           
}
