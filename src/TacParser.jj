/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. TacParser.jj */
/*@egen*/options
{
  LOOKAHEAD= 1;

}

PARSER_BEGIN(TacParser)
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class TacParser/*@bgen(jjtree)*/implements TacParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTTacParserState jjtree = new JJTTacParserState();

/*@egen*/
  public static void main(String [] args) throws ParseException, 
  FileNotFoundException
  {
    if (args.length < 1)
    {
      System.out.println("Please pass in the filename for a parameter.");
      System.exit(1);
    }
    System.out.println("Reading from file " + args [0]);
    TacParser tacParser = new TacParser(new FileInputStream(args [0]));
    SimpleNode root = tacParser.Expression();
    function(root);
  }

  public static void function(SimpleNode root)
  {
    root.dump("");
  }

}

PARSER_END(TacParser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN :
{
  < ASSIGN : ":=" >
| < PLUS : "+" >
| < SUBT : "-" >
| < MULT : "*" >
| < DIV : "/" >
}

TOKEN :
{
  < NUMBER : ([ "0"-"9" ])+ >
| < VARIABLE : ([ "a"-"z", "A"-"Z" ])+ ([ "0"-"9" ])* >
}

SimpleNode Expression() :
{/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  (
    Expr1()
  )+
  < EOF >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Expr1()         :
{/*@bgen(jjtree) Assign */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Assign */
  try {
/*@egen*/
  ExprVariable() < ASSIGN > Expr2()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Expr2()       :
{} //a anota\u00e7\u00e3o \u201c#void\u201d instrui a ferramenta para n\u00e3o gerar n\u00f3s para a regra
{
  ExprNumber()
  [
    (
      "+"/*@bgen(jjtree) #Add( 2) */
          {
            SimpleNode jjtn001 = new SimpleNode(JJTADD);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ ExprNumber()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
          }
/*@egen*/         // a anota\u00e7\u00e3o gera um n\u00f3 chamado Add se tiver 2 n\u00f3s filhos
  | "-"/*@bgen(jjtree) #Sub( 2) */
        {
          SimpleNode jjtn002 = new SimpleNode(JJTSUB);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/ ExprNumber()/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
/*@egen*/        
| "*"/*@bgen(jjtree) #Mul( 2) */
      {
        SimpleNode jjtn003 = new SimpleNode(JJTMUL);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
      }
      try {
/*@egen*/ ExprNumber()/*@bgen(jjtree)*/
      } catch (Throwable jjte003) {
        if (jjtc003) {
          jjtree.clearNodeScope(jjtn003);
          jjtc003 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte003 instanceof RuntimeException) {
          throw (RuntimeException)jjte003;
        }
        if (jjte003 instanceof ParseException) {
          throw (ParseException)jjte003;
        }
        throw (Error)jjte003;
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003,  2);
        }
      }
/*@egen*/        
| "/"/*@bgen(jjtree) #Div( 2) */
      {
        SimpleNode jjtn004 = new SimpleNode(JJTDIV);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
      }
      try {
/*@egen*/ ExprNumber()/*@bgen(jjtree)*/
      } catch (Throwable jjte004) {
        if (jjtc004) {
          jjtree.clearNodeScope(jjtn004);
          jjtc004 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte004 instanceof RuntimeException) {
          throw (RuntimeException)jjte004;
        }
        if (jjte004 instanceof ParseException) {
          throw (ParseException)jjte004;
        }
        throw (Error)jjte004;
      } finally {
        if (jjtc004) {
          jjtree.closeNodeScope(jjtn004,  2);
        }
      }
/*@egen*/        
)
]
}

void ExprNumber()       :
{
  Token t;
}
{
  t = < NUMBER > | < VARIABLE >/*@bgen(jjtree) t */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/
  {
    
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
         
    
}

void ExprVariable()       :
{
  Token t;
}
{
  t = < VARIABLE >/*@bgen(jjtree) Variable */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTVARIABLE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/
  {
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
           
}
