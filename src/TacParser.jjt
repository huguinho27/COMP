options
{
  LOOKAHEAD= 1;

}

PARSER_BEGIN(TacParser)
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

public class TacParser
{
  public static void main(String [] args) throws ParseException, 
  FileNotFoundException, IOException
  {
    if (args.length < 1)
    {
      System.out.println("Please pass in the filename for a parameter.");
      System.exit(1);
    }
    System.out.println("Reading from file " + "input2.txt");
    TacParser tacParser = new TacParser(new FileInputStream(args [0]));
    SimpleNode root = tacParser.Expression();
    function(root);
    System.out.println("\nRegister Allocation:");
    LifetimeAnalysis lf = new LifetimeAnalysis(8, root);
    lf.printLifetime(root);
    lf.printLifetimeGraph(root);
    TacToC tac = new TacToC();
    tac.saveFIle(root);
  }

  public static void function(SimpleNode root)
  {
    root.dump("");
  }
}

PARSER_END(TacParser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN :
{
  < ASSIGN : ":=" >
| < PLUS : "+" >
| < SUBT : "-" >
| < MULT : "*" >
| < DIV : "/" >
| < LESSER : "<" >
| < LESSEQUAL : "<=" >
| < GREATER : ">" >
| < GREATEQUAL : ">=" >
| < LABEL : ":" >
}

TOKEN :
{
  < IF : "if" >
| < GOTO : "goto" >
| < NUMBER : ([ "0"-"9" ])+ >
| < VARIABLE : ([ "a"-"z", "A"-"Z" ])+ ([ "0"-"9" ])* >
}

SimpleNode Expression() :
{}
{
  (
    (
       LOOKAHEAD(3)
      (
        LOOKAHEAD(2)
        ExprLabel()
      )?
      (
        Expr1()
      | ExprIf()
      | ExprGoto()
      )
    | 
       ExprLabel()
    )
  )+
  < EOF >
  {
    return jjtThis;
  }
}

void ExprLabel() #Label :
{
  Token t;
}
{
  ExprVariable() t = < LABEL >
  {
    System.out.println(t.image);
    jjtThis.jjtSetValue(t.image);
  }
}

void ExprPoint() #Point :
{
  Token t;
}
{
  t = < VARIABLE >
  {
    jjtThis.jjtSetValue(t.image);
  }
}

void ExprIf() #If :
{
  Token t;
}
{
  t = < IF > ExprCompare() ExprGoto()
  {
    jjtThis.jjtSetValue(t.image);
  }
}

void ExprGoto() #Goto :
{
  Token t;
}
{
  t = < GOTO > ExprVariable()
  {
    jjtThis.jjtSetValue(t.image);
  }
}

void ExprCompare() #Compare :
{
  Token t;
}
{
  ExprTerm()
  (
    LOOKAHEAD(2)
    t = < LESSER >
  | t = < LESSEQUAL >
  | t = < GREATER >
  | t = < GREATEQUAL >
  )
  ExprTerm()
  {
    jjtThis.jjtSetValue(t.image);
  }
}

void Expr1() #Assign :
{
  Token t;
}
{
  ExprVariable() t = < ASSIGN >
  (
    LOOKAHEAD(2)
    Expr2()
  | ExprTerm()
  )
  {
    jjtThis.jjtSetValue(t.image);
  }
}

void Expr2() #Oper :
{
  Token t;
}
{
  ExprTerm()
  (
    t = < PLUS >
  | t = < SUBT >
  | t = < MULT >
  | t = < DIV >
  )
  ExprTerm()
  {
    jjtThis.jjtSetValue(t.image);
  }
}

void ExprTerm() #void :
{
  Token t;
}
{
  (
    t = < NUMBER >
  | t = < VARIABLE >
  )
  {
    jjtThis.jjtSetValue(t.image);
  }
  #Term
}

void ExprVariable() #void :
{
  Token t;
}
{
  t = < VARIABLE >
  {
    jjtThis.jjtSetValue(t.image);
  }
  #Variable
}
