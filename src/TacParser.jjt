options
{
  LOOKAHEAD= 1;

}

PARSER_BEGIN(TacParser)
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class TacParser
{
  public static void main(String [] args) throws ParseException, 
  FileNotFoundException
  {
    if (args.length < 1)
    {
      System.out.println("Please pass in the filename for a parameter.");
      System.exit(1);
    }
    System.out.println("Reading from file " + args [0]);
    TacParser tacParser = new TacParser(new FileInputStream(args [0]));
    SimpleNode root = tacParser.Expression();
    root.dump("");
  }
}

PARSER_END(TacParser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN :
{
  < ASSIGN : ":=" >
| < PLUS : "+" >
| < SUBT : "-" >
| < MULT : "*" >
| < DIV : "/" >
}

TOKEN :
{
  < NUMBER : ([ "0"-"9" ])+ >
| < VARIABLE : ([ "a"-"z", "A"-"Z" ])+ ([ "0"-"9" ])* >
}

SimpleNode Expression() :
{}
{
  (
    Expr1()
  )+
  < EOF >
  {
    return jjtThis;
  }
}

void Expr1() #Assign :
{
}
{
  ExprVariable() < ASSIGN > Expr2()
}

void Expr2() #void :
{} //a anotação “#void” instrui a ferramenta para não gerar nós para a regra
{
  ExprNumber()
  [
    (
      "+" ExprNumber() #Add(2) // a anotação gera um nó chamado Add se tiver 2 nós filhos
  | "-" ExprNumber() #Sub(2)
| "*" ExprNumber() #Mul(2)
| "/" ExprNumber() #Div(2)
)
]
}

void ExprNumber() #void :
{
  Token t;
}
{
  t = < NUMBER > | < VARIABLE >
  {
  //jjtThis.val = sign * Integer.parseInt(t.image);
  }
  #Term
}

void ExprVariable() #void :
{
  Token t;
}
{
  t = < VARIABLE >
  {
  }
  #Variable
}
